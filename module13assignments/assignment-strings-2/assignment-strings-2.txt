Q1.Input a string and concatenate with its reverse string and print it.
Ans-
#include<bits/stdc++.h>
using namespace std;
int main() {
    string str;
    cout << "Enter a string: ";
    cin >> str;
    string reversedStr = str;
    reverse(reversedStr.begin(), reversedStr.end());
    cout << str + reversedStr;
    return 0;
}

Q2.Find the second largest digit in the string consisting of digits from ‘0’ to ‘9’.
Ans-
#include<bits/stdc++.h>
using namespace std;
int main() {
    string str;
    cout << "Enter a string of digits: ";
    cin >> str;
    int max1 = -1, max2 = -1;
    for(char c : str) {
        int digit = c - '0';
        if(digit > max1) {
            max2 = max1;
            max1 = digit;
        } else if(digit > max2 && digit != max1) {
            max2 = digit;
        }
    }
    if(max2 == -1) {
        cout << "No second largest digit";
    } else {
        cout << max2;
    }
    return 0;
}

Q3.Input a string and return the number of substrings that contain only vowels.
Ans-
#include<bits/stdc++.h>
using namespace std;
bool isVowel(char c) {
    c = tolower(c);
    return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');
}
int main() {
    string str;
    cout << "Enter a string: ";
    cin >> str;
    int count = 0;
    for(int i = 0; i < str.length(); ++i) {
        if(isVowel(str[i])) {
            count++;
            for(int j = i + 1; j < str.length() && isVowel(str[j]); ++j) {
                count++;
            }
        }
    }
    cout << count;
    return 0;
}

Q4.Given an array of strings. Check whether they are anagram or not.
Ans-
#include<bits/stdc++.h>
using namespace std;
bool areAnagrams(string s1, string s2) {
    sort(s1.begin(), s1.end());
    sort(s2.begin(), s2.end());
    return s1 == s2;
}
int main() {
    string s1, s2;
    cout << "Enter the first string: ";
    cin >> s1;
    cout << "Enter the second string: ";
    cin >> s2;
    if(areAnagrams(s1, s2)) {
        cout << "True";
    } else {
        cout << "False";
    }
    return 0;
}

Q5.Given a sentence ‘str’, return the word that is lexicographically maximum.
Ans-
#include<bits/stdc++.h>
using namespace std;
int main() {
    string str, word, maxWord = "";
    cout << "Enter a sentence: ";
    cin.ignore();
    getline(cin, str);
    stringstream ss(str);
    while(ss >> word) {
        if(word > maxWord) {
            maxWord = word;
        }
    }
    cout << maxWord;
    return 0;
}

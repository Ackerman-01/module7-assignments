Q1.Which of the following(s) is/are true about bubble sort:
It is stable sort
It has a worst case space complexity of O(n)
It involves swapping of adjacent elements
After each iteration, the greatest element is placed at the end of the array.
Ans-
It has a worst case space complexity of O(n) False

Q2.What will the following array look like after one iteration of bubble sort [1,6,2,5,4,3].
[1,3,2,4,5,6]
[1,2,3,4,5,6]
[1,2,5,4,3,6]
[1,2,4,5,3,6]
Ans-[1,2,5,4,3,6]

Q3.In which case does bubble sort work in the most efficient way:
When the array is sorted in increasing order
When the array is sorted partially
When the array is sorted in decreasing order.
When the array is nearly sorted.
Ans-When the array is sorted in increasing order

Q4.Sort the array in descending order using Bubble Sort.
Ans-
#include <iostream>
using namespace std;
void bubbleSortDescending(int arr[], int n) {
for(int i = 0; i < n-1; i++) {
for(int j = 0; j < n-i-1; j++) {
if(arr[j] < arr[j+1]) {
swap(arr[j], arr[j+1]);
}
}
}
}
int main() {
int n;
cout<<"Enter the size of the array: ";
cin>>n;
int arr[n];
cout<<"Enter the elements of the array: ";
for(int i = 0; i < n; i++) {
cin>>arr[i];
}
bubbleSortDescending(arr, n);
cout<<"Array after sorting in descending order: ";
for(int i = 0; i < n; i++) {
cout<<arr[i]<<" ";
}
return 0;
}

Q5.Check if the given array is almost sorted. (elements are at-most one position away)
Ans-
#include <iostream>
using namespace std;
bool isAlmostSorted(int arr[], int n) {
for(int i = 0; i < n-1; i++) {
if(abs(arr[i] - arr[i+1]) > 1) {
return false;
}
}
return true;
}
int main() {
int n;
cout<<"Enter the size of the array: ";
cin>>n;
int arr[n];
cout<<"Enter the elements of the array: ";
for(int i = 0; i < n; i++) {
cin>>arr[i];
}
if(isAlmostSorted(arr, n)) {
cout<<"The array is almost sorted.";
} else {
cout<<"The array is not almost sorted.";
}
return 0;
}

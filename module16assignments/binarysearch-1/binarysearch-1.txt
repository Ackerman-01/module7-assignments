Q1.Given a sorted array of n elements and a target ‘x’. Find the last occurrence of ‘x’ in the array. If ‘x’ does not exist return -1.
Input 1: arr[] = {1,2,3,3,4,4,4,5} , x = 4
Output 1: 6
Ans-
#include <iostream>
using namespace std;
int lastOccurrence(int arr[], int n, int x) {
    int result = -1;
    int low = 0, high = n - 1;
    while(low <= high) {
        int mid = (low + high) / 2;
        if(arr[mid] == x) {
            result = mid;
            low = mid + 1;
        } else if(arr[mid] < x) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return result;
}
int main() {
    int n, x;
    cout << "Enter the number of elements in the array: ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array: ";
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    cout << "Enter the target element x: ";
    cin >> x;
    cout << "The last occurrence of " << x << " is at index: " << lastOccurrence(arr, n, x);
    return 0;
}

Q2.Given a sorted binary array, efficiently count the total number of 1’s in it.
Input 1 : a = [0,0,0,0,1,1]
Output 1: 2
Ans-
#include <iostream>
using namespace std;
int countOnes(int arr[], int n) {
    int low = 0, high = n - 1;
    while(low <= high) {
        int mid = (low + high) / 2;
        if(arr[mid] == 1 && (mid == 0 || arr[mid - 1] == 0)) {
            return n - mid;
        } else if(arr[mid] == 0) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return 0;
}
int main() {
    int n;
    cout << "Enter the number of elements in the binary array: ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array: ";
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    cout << "The number of 1's in the array: " << countOnes(arr, n);
    return 0;
}

Q3.Given a matrix having 0-1 only where each row is sorted in increasing order, find the row with the maximum number of 1’s.
Input matrix : 0 1 1 1
               0 0 1 1
               1 1 1 1 // this row has maximum 1s
               0 0 0 0
Output: 2
Ans-
#include <iostream>
using namespace std;
int rowWithMaxOnes(int mat[][4], int n, int m) {
    int maxOnes = -1;
    int rowIndex = -1;
    int j = m - 1;
    for(int i = 0; i < n; i++) {
        while(j >= 0 && mat[i][j] == 1) {
            j--;
            rowIndex = i;
        }
    }
    return rowIndex;
}
int main() {
    int n = 4, m = 4;
    int mat[4][4] = {{0,0,0,1}, {0,0,1,1}, {0,1,1,1}, {1,1,1,1}};
    cout << "The row with maximum number of 1's is: " << rowWithMaxOnes(mat, n, m);
    return 0;
}

Q4.Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive in sorted order. There is only one repeated number in nums, return this repeated number.
Input 1: arr[] = {1,2,3,3,4}
Output 1: 3
Ans-
#include <iostream>
using namespace std;
int findDuplicate(int arr[], int n) {
    for(int i = 1; i < n; i++) {
        if(arr[i] == arr[i-1]) {
            return arr[i];
        }
    }
    return -1;
}
int main() {
    int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array: ";
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    cout << "The repeated number is: " << findDuplicate(arr, n);
    return 0;
}

Q5.Given a number ‘n’. Predict whether ‘n’ is a valid perfect square or not.
Input 1: n = 36
Output 1: yes
Ans-
#include <iostream>
#include <cmath>
using namespace std;
bool isPerfectSquare(int n) {
    int sqRoot = sqrt(n);
    return sqRoot * sqRoot == n;
}
int main() {
    int n;
    cout << "Enter the number n: ";
    cin >> n;
    if(isPerfectSquare(n)) {
        cout << "yes";
    } else {
        cout << "no";
    }
    return 0;
}

Q6.You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.
Given the integer n, return the number of complete rows of the staircase you will build.
Input 1: n = 5
Output 1: 2
Ans-
#include <iostream>
using namespace std;
int arrangeCoins(int n) {
    int k = 0;
    while(n >= k + 1) {
        k++;
        n -= k;
    }
    return k;
}
int main() {
    int n;
    cout << "Enter the number of coins: ";
    cin >> n;
    cout << "The number of complete rows: " << arrangeCoins(n);
    return 0;
}

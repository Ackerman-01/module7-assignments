Q1. Write a program to apply binary search in an array sorted in decreasing order.
Ans-
#include <iostream>
using namespace std;
int binarySearchDescending(int arr[], int n, int target) {
    int low = 0, high = n - 1;
    while(low <= high) {
        int mid = (low + high) / 2;
        if(arr[mid] == target) {
            return mid;
        } else if(arr[mid] < target) {
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }
    return -1;
}
int main() {
    int n, target;
    cout << "Enter the number of elements in the array: ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array (sorted in decreasing order): ";
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    cout << "Enter the target element: ";
    cin >> target;
    int result = binarySearchDescending(arr, n, target);
    if(result != -1) {
        cout << "Element found at index " << result;
    } else {
        cout << "Element not found.";
    }
    return 0;
}

Q2. You have a sorted array of infinite numbers, how would you search for an element in the array?
Ans-

Start with a small range: Begin by checking the first element.

Double the range: Keep expanding the search range by doubling the index (e.g., 1, 2, 4, 8...) until the target element lies within the range.

Binary Search: Once the range is identified, apply binary search within that range to find the target element.


Q3. Given an m x n integer matrix matrix with the following two properties:
- Each row is sorted in non-decreasing order.
- The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in the matrix or false otherwise.
Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
Ans-
#include <iostream>
using namespace std;

bool searchMatrix(int matrix[][4], int m, int n, int target) {
    int left = 0, right = m * n - 1;
    while(left <= right) {
        int mid = left + (right - left) / 2;
        int mid_value = matrix[mid / n][mid % n];
        
        if(mid_value == target)
            return true;
        else if(mid_value < target)
            left = mid + 1;
        else
            right = mid - 1;
    }
    return false;
}

int main() {
    int matrix[3][4] = {{1, 3, 5, 7}, {10, 11, 16, 20}, {23, 30, 34, 60}};
    int target;
    cout << "Enter target: ";
    cin >> target;
    if(searchMatrix(matrix, 3, 4, target))
        cout << "True" << endl;
    else
        cout << "False" << endl;
    return 0;
}


Q4. There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values). Before being passed to your function, nums is rotated at an unknown pivot index k. Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.
Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
Ans-
#include <iostream>
using namespace std;

bool searchRotatedArray(int nums[], int n, int target) {
    int left = 0, right = n - 1;
    while(left <= right) {
        int mid = left + (right - left) / 2;
        
        if(nums[mid] == target)
            return true;
        
        if(nums[left] <= nums[mid]) {
            if(nums[left] <= target && target < nums[mid])
                right = mid - 1;
            else
                left = mid + 1;
        } else {
            if(nums[mid] < target && target <= nums[right])
                left = mid + 1;
            else
                right = mid - 1;
        }
    }
    return false;
}

int main() {
    int nums[] = {2, 5, 6, 0, 0, 1, 2};
    int target;
    cout << "Enter target: ";
    cin >> target;
    if(searchRotatedArray(nums, 7, target))
        cout << "True" << endl;
    else
        cout << "False" << endl;
    return 0;
}

Q1. Print an increasing-decreasing sequence using recursion
#include <iostream>
using namespace std;

void printSequence(int n) {
    if (n == 0)
        return;
    cout << n << " ";
    printSequence(n - 1);
    cout << n << " ";
}

int main() {
    int n;
    cout << "Enter n: ";
    cin >> n;
    printSequence(n);
    return 0;
}
Q2: Write a program to print the sum of all odd numbers from a to b (inclusive) using recursion
ans-
#include<iostream>
using namespace std;
int sumOddNumbers(int a, int b) {
    if(a > b)
        return 0;
    if(a % 2 == 1)
        return a + sumOddNumbers(a + 1, b);
    return sumOddNumbers(a + 1, b);
}
int main() {
    int a, b;
    cin >> a >> b;
    cout << sumOddNumbers(a, b) << endl;
    return 0;
}

Q3. Given a positive integer, return true if it is a power of 2 using recursion
ans-
#include<iostream>
using namespace std;
bool isPowerOf2(int n) {
    if(n == 1)
        return true;
    if(n <= 0 || n % 2 != 0)
        return false;
    return isPowerOf2(n / 2);
}
int main() {
    int n;
    cin >> n;
    cout << (isPowerOf2(n) ? "Yes" : "No") << endl;
   
    cin >> n;
    cout << (isPowerOf2(n) ? "Yes" : "No") << endl;
    return 0;
}

Q4.  There are n stairs, and a person standing at the bottom wants to climb the stairs to reach the nth stair. The person can climb either 1, 2, or 3 stairs at a time. Write a program to count the number of ways the person can reach the top using recursion.
ans-
#include<iostream>
using namespace std;
int countWays(int n) {
    if(n == 0)
        return 1;
    if(n < 0)
        return 0;
    return countWays(n - 1) + countWays(n - 2) + countWays(n - 3);
}
int main() {
    int n;
    cin >> n;
    cout << countWays(n) << endl;
    return 0;
}

Q1: Given an integer array containing unique numbers, return the power set, containing all the subsets of the set. [Leetcode 78] 
Ans=
#include <iostream>
using namespace std;
#define MAX 100

void printSubsets(int arr[], int n, bool subset[], int subsetSize) {
    for (int i = 0; i < subsetSize; ++i) {
        if (subset[i]) cout << arr[i] << " ";
    }
    cout << endl;
}

void subsetsHelper(int arr[], int n, int start, bool subset[], int subsetSize) {
    printSubsets(arr, n, subset, subsetSize);
    for (int i = start; i < n; ++i) {
        subset[i] = true;
        subsetsHelper(arr, n, i + 1, subset, subsetSize);
        subset[i] = false;
    }
}

int main() {
    int arr[] = {1, 2, 3};
    int n = sizeof(arr) / sizeof(arr[0]);
    bool subset[MAX] = {false};
    subsetsHelper(arr, n, 0, subset, n);
    return 0;
}

Q2: Given an integer array which may contain duplicate numbers, return the power set, containing all the subsets of the set. [Leetcode 90] 
Ans=
#include <iostream>
#include <algorithm>
using namespace std;
#define MAX 100

void printSubsets(int arr[], int n, bool subset[], int subsetSize) {
    for (int i = 0; i < subsetSize; ++i) {
        if (subset[i]) cout << arr[i] << " ";
    }
    cout << endl;
}

void subsetsWithDupHelper(int arr[], int n, int start, bool subset[], int subsetSize) {
    printSubsets(arr, n, subset, subsetSize);
    for (int i = start; i < n; ++i) {
        if (i > start && arr[i] == arr[i - 1]) continue;
        subset[i] = true;
        subsetsWithDupHelper(arr, n, i + 1, subset, subsetSize);
        subset[i] = false;
    }
}

int main() {
    int arr[] = {1, 2, 2};
    int n = sizeof(arr) / sizeof(arr[0]);
    bool subset[MAX] = {false};
    sort(arr, arr + n);
    subsetsWithDupHelper(arr, n, 0, subset, n);
    return 0;
}

Q3: Given a string, find the length of the longest common substring from two given strings. 
Ans=
#include <iostream>
#include <cstring>
using namespace std;

int longestCommonSubstring(string s1, string s2) {
    int m = s1.length(), n = s2.length();
    int maxLength = 0;
    int dp[m + 1][n + 1] = {0};
    
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (s1[i - 1] == s2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
                maxLength = max(maxLength, dp[i][j]);
            }
        }
    }
    return maxLength;
}

int main() {
    string s1 = "abcdef";
    string s2 = "zabcf";
    cout << longestCommonSubstring(s1, s2) << endl;
    return 0;
}
Q4: Program to find the factorial of a given number.
Ans=
#include <iostream>
using namespace std;

int factorial(int n) {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
}

int main() {
    int num = 5;
    cout << factorial(num) << endl;
    return 0;
}

Q5: Program to convert a decimal number to binary.
Ans=
#include <iostream>
using namespace std;

void decimalToBinary(int n) {
    if (n == 0) {
        cout << 0;
        return;
    }
    int binary[32];
    int i = 0;
    while (n > 0) {
        binary[i++] = n % 2;
        n /= 2;
    }
    for (int j = i - 1; j >= 0; --j) {
        cout << binary[j];
    }
    cout << endl;
}

int main() {
    int num = 10;
    decimalToBinary(num);
    return 0;
}

Q1: Given an array of integers, sort it in descending order using merge sort algorithm. 
Ans=
#include <iostream>
using namespace std;

void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[n1], R[n2];
    for (int i = 0; i < n1; ++i) L[i] = arr[l + i];
    for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j];
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] >= R[j]) arr[k++] = L[i++];
        else arr[k++] = R[j++];
    }
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);
    mergeSort(arr, 0, n - 1);
    for (int i = 0; i < n; ++i) cout << arr[i] << " ";
    cout << endl;
    return 0;
}


Q2: Reverse Pairs (Leetcode Problem) : Given an integer array nums, return the number of reverse pairs in the array. A reverse pair is a pair (i, j) where: 0 <= i < j < nums.length and nums[i] > 2 * nums[j]. 
Ans=
#include <iostream>
using namespace std;

void merge(int arr[], int temp[], int l, int m, int r, int& count) {
    int i = l, j = m + 1;
    while (i <= m) {
        while (j <= r && arr[i] > 2 * arr[j]) ++j;
        count += (j - (m + 1));
        ++i;
    }
    int k = l, left = l, right = m + 1;
    while (left <= m && right <= r) {
        if (arr[left] <= arr[right]) temp[k++] = arr[left++];
        else temp[k++] = arr[right++];
    }
    while (left <= m) temp[k++] = arr[left++];
    while (right <= r) temp[k++] = arr[right++];
    for (i = l; i <= r; ++i) arr[i] = temp[i];
}

void mergeSort(int arr[], int temp[], int l, int r, int& count) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, temp, l, m, count);
        mergeSort(arr, temp, m + 1, r, count);
        merge(arr, temp, l, m, r, count);
    }
}

int countReversePairs(int arr[], int n) {
    int temp[n];
    int count = 0;
    mergeSort(arr, temp, 0, n - 1, count);
    return count;
}

int main() {
    int arr[] = {1, 3, 2, 3, 1};
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << countReversePairs(arr, n) << endl;
    return 0;
}

